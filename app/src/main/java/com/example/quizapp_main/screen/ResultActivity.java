package com.example.quizapp_main.screen;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.OnBackPressedCallback;
import androidx.appcompat.app.AppCompatActivity;

import com.example.quizapp_main.model.AppConfig;
import com.example.quizapp_main.R;
import com.example.quizapp_main.model.PrefHelper;
import com.example.quizapp_main.model.SoundManager;
import com.google.android.material.card.MaterialCardView;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ServerValue;

import java.util.HashMap;
import java.util.Map;

public class ResultActivity extends AppCompatActivity {
    SoundManager soundManager;
    MaterialCardView home, playAgain;
    TextView resultMoney;
    DatabaseReference databaseRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_result);
        databaseRef = FirebaseDatabase.getInstance().getReference("users");

        soundManager = new SoundManager();
        if (AppConfig.isVolumeOn) {
            soundManager.play(this, R.raw.end, false);
        }

        EdgeToEdge.enable(this);

        resultMoney = findViewById(R.id.resultMoney);
        int totalMoney = getIntent().getIntExtra("totalMoney", 0);
        int totalQuestion = getIntent().getIntExtra("totalQuestion", 0);

        PrefHelper.updateMoney(this, totalMoney);
        PrefHelper.updateQuestionNumber(this, totalQuestion);

        // G·ªçi h√†m saveToFirebase ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë ti·ªÅn v√† s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng v√†o Firebase
        saveToFirebase(totalMoney, totalQuestion);

        home = findViewById(R.id.returnHome);
        playAgain = findViewById(R.id.playAgain);

        home.setOnClickListener(v -> {
            soundManager.stop();
            startActivity(new Intent(ResultActivity.this, MainActivity.class));
            finish();
        });

        playAgain.setOnClickListener(v -> {
            soundManager.stop();
            startActivity(new Intent(ResultActivity.this, BasicQuiz.class));  // Assuming QuizActivity is your quiz activity
            finish();
        });

        resultMoney.setText("S·ªë ti·ªÅn b·∫°n ƒë√£ th·∫Øng: " + formatMoney(totalMoney));

        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {
            @Override
            public void handleOnBackPressed() {
                startActivity(new Intent(ResultActivity.this, MainActivity.class));
                finish();
            }
        });
    }
    private void saveToFirebase(int newMoney, int newQuestionNumber) {
        String userId = PrefHelper.getUserId(this);
        if (userId == null) {
            Log.e("Firebase", "Ch∆∞a c√≥ userId");
            return;
        }

        DatabaseReference userRef = databaseRef.child(userId);

        userRef.get().addOnSuccessListener(snapshot -> {
            if (snapshot.exists()) {
                Integer currentMoney = snapshot.child("money").getValue(Integer.class);
                if (currentMoney == null) currentMoney = 0;

                Integer currentQuestionNumber = snapshot.child("questionNumber").getValue(Integer.class);
                if (currentQuestionNumber == null) currentQuestionNumber = 0;

                Integer currentHighScore = snapshot.child("highScore").getValue(Integer.class);
                if (currentHighScore == null) currentHighScore = 0;

                // C·∫≠p nh·∫≠t s·ªë ti·ªÅn v√† s·ªë c√¢u h·ªèi n·∫øu m·ªõi l·ªõn h∆°n
                if (newMoney > currentMoney) {
                    currentMoney = newMoney;
                }

                if (newQuestionNumber > currentQuestionNumber) {
                    currentQuestionNumber = newQuestionNumber;
                }

                // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë cao nh·∫•t n·∫øu m·ªõi l·ªõn h∆°n
                if (newMoney > currentHighScore) {
                    currentHighScore = newMoney;
                }

                Map<String, Object> updates = new HashMap<>();
                updates.put("money", currentMoney);
                updates.put("questionNumber", currentQuestionNumber);
                updates.put("highScore", currentHighScore);
                updates.put("lastUpdate", ServerValue.TIMESTAMP);

                userRef.updateChildren(updates)
                        .addOnSuccessListener(aVoid -> Log.d("Firebase", "ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng"))
                        .addOnFailureListener(e -> Log.e("Firebase", "L·ªói khi l∆∞u: " + e.getMessage()));

                // G·ªçi h√†m ƒë·ªÉ x√°c ƒë·ªãnh h·∫°ng ng∆∞·ªùi ch∆°i
                getPlayerRank(currentHighScore);

            } else {
                Log.e("Firebase", "Kh√¥ng t√¨m th·∫•y user snapshot");
            }
        }).addOnFailureListener(e -> {
            Log.e("Firebase", "L·ªói khi l·∫•y d·ªØ li·ªáu user: " + e.getMessage());
        });
    }

    private void getPlayerRank(int currentHighScore) {
        DatabaseReference usersRef = FirebaseDatabase.getInstance().getReference("users");

        usersRef.orderByChild("money").get().addOnSuccessListener(snapshot -> {
            if (snapshot.exists()) {
                int rank = 1;
                for (DataSnapshot userSnapshot : snapshot.getChildren()) {
                    Integer userMoney = userSnapshot.child("money").getValue(Integer.class);
                    if (userMoney == null) userMoney = 0;

                    if (userMoney > currentHighScore) {
                        rank++;
                    }
                }

                // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã h·∫°ng ng∆∞·ªùi ch∆°i
                showRankDialog(rank);

            } else {
                Log.e("Firebase", "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ng∆∞·ªùi ch∆°i");
            }
        }).addOnFailureListener(e -> {
            Log.e("Firebase", "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi ch∆°i: " + e.getMessage());
        });
    }
    private void showRankDialog(int rank) {
        // Ki·ªÉm tra n·∫øu h·∫°ng ng∆∞·ªùi ch∆°i t·ª´ 5 tr·ªü l√™n
        if (rank > 5) {
            return; // Kh√¥ng l√†m g√¨ v√† tho√°t kh·ªèi ph∆∞∆°ng th·ª©c n·∫øu h·∫°ng nh·ªè h∆°n 5
        }

        String title, message, emoji;

        // X·ª≠ l√Ω th√¥ng ƒëi·ªáp d·ª±a tr√™n h·∫°ng
        if (rank == 1) {
            title = "ü•á Huy·ªÅn tho·∫°i!";
            message = "B·∫°n ƒëang ƒë·ª©ng ƒë·∫ßu b·∫£ng x·∫øp h·∫°ng!";
            emoji = "‚ú®";
        } else if (rank == 2) {
            title = "ü•à Xu·∫•t s·∫Øc!";
            message = "B·∫°n ƒëang ƒë·ª©ng th·ª© 2, ch·ªâ c√≤n m·ªôt b∆∞·ªõc n·ªØa!";
            emoji = "üî•";
        } else if (rank == 3) {
            title = "ü•â Tuy·ªát v·ªùi!";
            message = "B·∫°n n·∫±m trong top 3 ng∆∞·ªùi ch∆°i gi·ªèi nh·∫•t!";
            emoji = "üèÜ";
        } else {
            title = "üëç C·ªë g·∫Øng h∆°n n·ªØa!";
            message = "B·∫°n ƒë·∫°t h·∫°ng #" + rank + " tr√™n b·∫£ng x·∫øp h·∫°ng.";
            emoji = "üéØ";
        }

        // T·∫°o v√† hi·ªÉn th·ªã dialog v·ªõi c√°c t√πy ch·ªânh
        new com.google.android.material.dialog.MaterialAlertDialogBuilder(this)
                .setTitle(emoji + " " + title)  // Th√™m emoji v√†o ti√™u ƒë·ªÅ
                .setMessage(message)            // Th√™m th√¥ng ƒëi·ªáp v√†o n·ªôi dung
                .setPositiveButton("OK", (dialog, which) -> dialog.dismiss())  // N√∫t OK ƒë·ªÉ ƒë√≥ng dialog
                .setCancelable(false)           // Ng·ª´ng ng∆∞·ªùi d√πng tho√°t b·∫±ng c√°ch nh·∫•n ngo√†i
                .show();  // Hi·ªÉn th·ªã dialog
    }





    private String formatMoney(int money) {
        return String.format("%,d VND", money);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (soundManager != null) {
            soundManager.stop();
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (soundManager != null) {
            soundManager.stop();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (soundManager != null && AppConfig.isVolumeOn && !soundManager.isPlaying()) {
            soundManager.play(this, R.raw.end, true);
        }
    }

}
